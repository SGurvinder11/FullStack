ðŸ§  Aim
To implement JWT (JSON Web Token) authentication in a Banking API to securely protect endpoints such as checking account balance, transferring funds, and viewing transactions.
The middleware should verify JWT tokens to ensure only authenticated users can access these secure endpoints.

 Concept Overview
JWT Authentication Flow:
User logs in â†’ server verifies credentials â†’ generates a JWT token signed with a secret key.
Client stores the token (in local storage or cookies).
Client sends the token in the Authorization header (Bearer <token>) for every secured request.
Middleware verifies the JWT â†’ grants or denies access.

Code Implementation
Step 1: Install Dependencies
npm init -y
npm install express jsonwebtoken body-parser


Step 2: Create bankingAPI.js

const express = require('express');
const jwt = require('jsonwebtoken');
const bodyParser = require('body-parser');

const app = express();
app.use(bodyParser.json());

// Secret key for signing JWT (in real projects, store in .env)
const JWT_SECRET = 'banking_secret_key_123';

// Mock user (in real apps, use database)
const user = {
  id: 1,
  username: 'suchet',
  password: 'secure123', // hashed in real systems
  balance: 5000
};

// ---------------------- LOGIN ROUTE ----------------------
app.post('/login', (req, res) => {
  const { username, password } = req.body;

  // Check user credentials
  if (username === user.username && password === user.password) {
    // Generate JWT Token
    const token = jwt.sign({ userId: user.id, username: user.username }, JWT_SECRET, { expiresIn: '1h' });
    return res.json({ message: 'Login successful', token });
  }

  res.status(401).json({ message: 'Invalid credentials' });
});

// ---------------------- JWT Middleware ----------------------
function authenticateJWT(req, res, next) {
  const authHeader = req.headers.authorization;

  if (authHeader && authHeader.startsWith('Bearer ')) {
    const token = authHeader.split(' ')[1];

    jwt.verify(token, JWT_SECRET, (err, userData) => {
      if (err) {
        return res.status(403).json({ message: 'Invalid or expired token' });
      }
      req.user = userData;
      next();
    });
  } else {
    res.status(401).json({ message: 'Authorization token missing' });
  }
}

// ---------------------- SECURE ENDPOINTS ----------------------

// Get Account Balance
app.get('/account/balance', authenticateJWT, (req, res) => {
  res.json({ username: req.user.username, balance: user.balance });
});

// Transfer Funds
app.post('/account/transfer', authenticateJWT, (req, res) => {
  const { amount, toAccount } = req.body;

  if (amount <= 0 || amount > user.balance) {
    return res.status(400).json({ message: 'Invalid or insufficient funds' });
  }

  user.balance -= amount;
  res.json({ message: `â‚¹${amount} transferred successfully to account ${toAccount}`, remainingBalance: user.balance });
});

// Transaction History
app.get('/account/transactions', authenticateJWT, (req, res) => {
  const mockTransactions = [
    { id: 1, type: 'credit', amount: 2000 },
    { id: 2, type: 'debit', amount: 1000 }
  ];
  res.json({ user: req.user.username, transactions: mockTransactions });
});

// ---------------------- START SERVER ----------------------
const PORT = 4000;
app.listen(PORT, () => console.log(`Secure Banking API running at http://localhost:${PORT}`));


